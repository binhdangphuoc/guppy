{"remainingRequest":"/home/binh/Binh/giaodien/guppy/node_modules/babel-loader/lib/index.js!/home/binh/Binh/giaodien/guppy/src/store/admin.js","dependencies":[{"path":"/home/binh/Binh/giaodien/guppy/src/store/admin.js","mtime":1635261369271},{"path":"/home/binh/Binh/giaodien/guppy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/binh/Binh/giaodien/guppy/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/binh/Binh/giaodien/guppy/src/store/admin.js"],"names":["axios","state","add_images","add_videos","add_guppy","error_sending","resultSending","list_guppy_info","list_guppy_info_root","mutations","SET_ADD_IMAGES","resp","SET_ADD_VIDEOS","SET_ADD_GUPPY","console","log","RESET_STATE","SET_ERROR","err","SET_LIST_GUPPY_INFO","SET_LIST_GUPPY_INFO_ROOT","SET_RESULT_SENDING","actions","addImages","payload","commit","post","data","addVideos","addGuppy","resetState","getListGuppyInfo","undefined","headers","removeGuppy","id","updateGuppy","put"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\n\nexport default {\n    state: {\n        add_images: null,\n        add_videos: null,\n        add_guppy: null,\n        error_sending: null,\n        resultSending: null,\n\n        list_guppy_info: [],\n        list_guppy_info_root: [],\n    },\n    mutations: {\n        SET_ADD_IMAGES(state, resp) {\n            state.add_images = resp;\n        },\n        SET_ADD_VIDEOS(state, resp) {\n            state.add_videos = resp;\n        },\n        SET_ADD_GUPPY(state, resp) {\n            state.add_guppy = resp;\n            console.log(\"result: \", state.add_guppy)\n        },\n        RESET_STATE(state) {\n            state.add_guppy = null;\n            state.add_images = null;\n            state.add_videos = null;\n            state.error_sending = null;\n            state.resultSending = null;\n            console.log(\"reset: \",state.add_guppy,state.add_images,state.add_videos)\n        },\n        SET_ERROR(state, err) {\n            state.error_sending = err;\n        },\n\n        SET_LIST_GUPPY_INFO(state, resp) {\n            state.list_guppy_info = resp;\n        },\n        SET_LIST_GUPPY_INFO_ROOT(state, resp) {\n            state.list_guppy_info_root = resp\n        },\n\n        SET_RESULT_SENDING(state, resp) {\n            state.resultSending = resp;\n        }\n    },\n    actions: {\n        async addImages({commit}, payload) {\n            try {\n                let resp = await axios.post('/admin/images', payload)\n                console.log(resp)\n                if(resp.data == 0) commit(\"SET_ERROR\", \"sending has error\")\n                else commit(\"SET_ADD_IMAGES\", resp.data)\n            } catch (err) {\n                console.log(\"error add images: \",err.resp)\n                commit(\"SET_ERROR\", \"can not send!\")\n            }\n        },\n        async addVideos({commit}, payload) {\n            try {\n                let resp = await axios.post('/admin/videos', payload)\n                console.log(resp)\n                if(resp.data == 0) commit(\"SET_ERROR\", \"sending has error\")\n                else commit(\"SET_ADD_VIDEOS\", resp.data)\n            } catch (err) {\n                console.log(\"error add videos: \",err.resp)\n                commit(\"SET_ERROR\", \"can not send!\")\n            }\n        },\n        async addGuppy({commit}, payload) {\n            try {\n                console.log(\"list guppy: \", payload)\n\n                let resp = await axios.post('/admin/guppy-info', payload)\n                console.log(resp)\n                if(resp.data == 0) commit(\"SET_ERROR\", \"sending has error\")\n                else commit(\"SET_ADD_GUPPY\", resp.data)\n            } catch (err) {\n                console.log(\"error add guppy: \",err.resp)\n                commit(\"SET_ERROR\", \"can not send!\")\n            }\n        },\n        resetState({commit}) {\n            commit(\"RESET_STATE\");\n        },\n\n        async getListGuppyInfo({commit}, payload) {\n            try {\n                if(payload == undefined || payload == \"\") payload = \"...\"\n                let resp = await axios.post('/admin/guppy-info', payload, {\n                    headers: {\n                        'Content-type': 'text/plain'\n                    }\n                })\n                console.log(\"resp: \",resp)\n                commit(\"SET_LIST_GUPPY_INFO\", resp.data)\n                commit(\"SET_LIST_GUPPY_INFO_ROOT\", resp.data)\n            } catch (err) {\n                console.log(\"error admin get guppy: \",err.resp)\n                commit(\"SET_ERROR\", \"can't get guppy info!\")\n            }\n        },\n        async removeGuppy({commit}, id) {\n            try {\n                let resp = await axios.delete('/admin/guppy/' + id);\n                commit(\"SET_RESULT_SENDING\", resp)\n            } catch(err) {\n                console.log(\"error remove images: \",err.resp)\n                commit(\"SET_ERROR\", \"can't remove!\")\n            }\n        },\n        async updateGuppy({commit}, payload) {\n            try {\n                let resp = await axios.put('/admin/guppy', payload);\n                commit(\"SET_RESULT_SENDING\", resp)\n            } catch(err) {\n                console.log(\"error update guppy: \",err.resp)\n                commit(\"SET_ERROR\", \"can't update!\")\n            }\n        }\n\n    }\n\n}"]}]}