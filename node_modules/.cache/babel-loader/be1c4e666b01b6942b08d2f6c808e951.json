{"remainingRequest":"/home/binh/Binh/giaodien/guppy-2/node_modules/babel-loader/lib/index.js!/home/binh/Binh/giaodien/guppy-2/node_modules/eslint-loader/index.js??ref--13-0!/home/binh/Binh/giaodien/guppy-2/src/store/admin.js","dependencies":[{"path":"/home/binh/Binh/giaodien/guppy-2/src/store/admin.js","mtime":1635228351729},{"path":"/home/binh/Binh/giaodien/guppy-2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/binh/Binh/giaodien/guppy-2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/binh/Binh/giaodien/guppy-2/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/binh/Binh/giaodien/guppy-2/src/store/admin.js"],"names":["axios","state","add_images","add_videos","add_guppy","error_sending","list_guppy_info","list_guppy_info_root","mutations","SET_ADD_IMAGES","resp","SET_ADD_VIDEOS","SET_ADD_GUPPY","console","log","RESET_STATE","SET_ERROR","err","SET_LIST_GUPPY_INFO","list_test","actions","addImages","payload","commit","post","data","addVideos","addGuppy","resetState","getListGuppyInfo","undefined","a","JSON","stringify"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\n\nexport default {\n    state: {\n        add_images: null,\n        add_videos: null,\n        add_guppy: null,\n        error_sending: null,\n\n        list_guppy_info: [],\n        list_guppy_info_root: [],\n    },\n    mutations: {\n        SET_ADD_IMAGES(state, resp) {\n            state.add_images = resp;\n        },\n        SET_ADD_VIDEOS(state, resp) {\n            state.add_videos = resp;\n        },\n        SET_ADD_GUPPY(state, resp) {\n            state.add_guppy = resp;\n            console.log(\"result: \", state.add_guppy)\n        },\n        RESET_STATE(state) {\n            state.add_guppy = null;\n            state.add_images = null;\n            state.add_videos = null;\n            state.error_sending = null;\n            console.log(\"reset: \",state.add_guppy,state.add_images,state.add_videos)\n        },\n        SET_ERROR(state, err) {\n            state.error_sending = err;\n        },\n\n        SET_LIST_GUPPY_INFO(state, resp) {\n            state.list_guppy_info = resp;\n            state.list_guppy_info_root = resp;\n            state.list_test = resp;\n            console.log(state.list_guppy_info_root)\n        }\n    },\n    actions: {\n        async addImages({commit}, payload) {\n            try {\n                let resp = await axios.post('/admin/images', payload)\n                console.log(resp)\n                if(resp.data == 0) commit(\"SET_ERROR\", \"sending has error\")\n                else commit(\"SET_ADD_IMAGES\", resp.data)\n            } catch (err) {\n                console.log(\"error add images: \",err.resp)\n                commit(\"SET_ERROR\", \"can not send!\")\n            }\n        },\n        async addVideos({commit}, payload) {\n            try {\n                let resp = await axios.post('/admin/videos', payload)\n                console.log(resp)\n                if(resp.data == 0) commit(\"SET_ERROR\", \"sending has error\")\n                else commit(\"SET_ADD_VIDEOS\", resp.data)\n            } catch (err) {\n                console.log(\"error add images: \",err.resp)\n                commit(\"SET_ERROR\", \"can not send!\")\n            }\n        },\n        async addGuppy({commit}, payload) {\n            try {\n                console.log(\"list guppy: \", payload)\n\n                let resp = await axios.post('/admin/guppy-info', payload)\n                console.log(resp)\n                if(resp.data == 0) commit(\"SET_ERROR\", \"sending has error\")\n                else commit(\"SET_ADD_GUPPY\", resp.data)\n            } catch (err) {\n                console.log(\"error add images: \",err.resp)\n                commit(\"SET_ERROR\", \"can not send!\")\n            }\n        },\n        resetState({commit}) {\n            commit(\"RESET_STATE\");\n        },\n\n        async getListGuppyInfo({commit}, payload) {\n            try {\n                if(payload == undefined || payload == null || payload == \"\") payload = \"...\"\n                let a = JSON.stringify({\"filter\" : payload})\n                console.log(\"name filter: \", a);\n                let resp = await axios.post('/admin/guppy-info', a)\n                console.log(\"resp: \",resp)\n                commit(\"SET_LIST_GUPPY_INFO\", resp.data)\n            } catch (err) {\n                console.log(\"error add images: \",err.resp)\n                commit(\"SET_ERROR\", \"can'n get guppy info!\")\n            }\n        }\n\n    }\n\n}"]}]}