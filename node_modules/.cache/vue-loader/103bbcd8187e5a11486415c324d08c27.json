{"remainingRequest":"/home/binh/Binh/giaodien/guppy-2/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/binh/Binh/giaodien/guppy-2/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/binh/Binh/giaodien/guppy-2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/binh/Binh/giaodien/guppy-2/src/components/admin/AddGuppy.vue?vue&type=template&id=74019acc&scoped=true&","dependencies":[{"path":"/home/binh/Binh/giaodien/guppy-2/src/components/admin/AddGuppy.vue","mtime":1635062688356},{"path":"/home/binh/Binh/giaodien/guppy-2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/binh/Binh/giaodien/guppy-2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/binh/Binh/giaodien/guppy-2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/binh/Binh/giaodien/guppy-2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}