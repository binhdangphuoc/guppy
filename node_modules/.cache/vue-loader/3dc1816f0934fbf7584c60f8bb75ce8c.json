{"remainingRequest":"/home/binh/Binh/giaodien/guppy/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/binh/Binh/giaodien/guppy/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/binh/Binh/giaodien/guppy/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/binh/Binh/giaodien/guppy/src/components/admin/AddImagesVides.vue?vue&type=template&id=f1449514&scoped=true&","dependencies":[{"path":"/home/binh/Binh/giaodien/guppy/src/components/admin/AddImagesVides.vue","mtime":1635061349435},{"path":"/home/binh/Binh/giaodien/guppy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/binh/Binh/giaodien/guppy/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/binh/Binh/giaodien/guppy/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/binh/Binh/giaodien/guppy/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}